"""
Michael Tucker 2018
Simple tools to make observing easier

"""

import argparse

def CSVtoJsky(fname, outdir=None):
	import sys,os
	from pandas import read_csv
	"""
	function: CSVtoJsky

	Converts a CSV file to a file parse-able by JSkyCalc
	CSV file must have colnames Target, RA, DEC

	Inputs:
		fname: filename of csv file
		outdir (optional): where to write the output file. Defaults to cwd

	Outputs:
		None
	"""

	def ConvertCoords(ra,dec):
		try:
			ra = float(ra) * 24.0 / 360.0
			hour = int(ra)
			ra = (ra - hour)*60.0
			minutes = int(ra)
			sec = round((ra - minutes) * 60.0, 2)
			rastr = '%02d %02d %05.2f' % (hour, minutes, sec)

			dec = float(dec)
			if dec >= 0.0: sign = '+'
			else: sign = '-'
			deg = int(dec)
			dec = (dec - deg) * 60.0
			dmin = int(dec)
			dsec = round((dec - dmin) * 60.0, 2)
			decstr = '%s%02d %02d %05.2f' % (sign,deg, dmin, dsec)

		except:
			if ':' in ra: ra = ra.split(':')
			else: ra = ra.split()
			rastr = '%02d %02d %05.2f' % (int(ra[0]), int(ra[1]), float(ra[2]))

			if ':' in dec: dec = dec.split(':')
			else: dec = dec.split()
			if int(dec[0]) >= 0.0: sign = '+'
			else: sign = '-'
			decstr = '%s%02d %02d %05.2f' % (sign,abs(int(dec[0])), int(dec[1]), float(dec[2]))
		finally:
			return rastr, decstr


	if not os.path.exists(fname):
		raise IOError('Cant find file %s!' % fname)

	if outdir == None: outdir = os.getcwd()+'/'


	data = read_csv(fname)
	if not all([True if colname in data.columns else False for colname in ['Object', 'RA', 'DEC']]):
		raise KeyError('CSV file must have colnames Object, RA and DEC!')


	ofile = open(outdir+'jsky.list','w')
	ofile.write('#List of targets for jskycalc\n')
	ofile.write('#File generated by CSVtoJsky\n')
	ofile.write('# Target \t RA \t\t DEC \t epoch\n#\n')

	line = '%s %s   %s  2000.0\n'
	for obj, ra, dec in zip(data['Object'], data['RA'], data['DEC']):
		if obj.startswith('#'): continue
		rastr, decstr = ConvertCoords(ra,dec)
		while len(obj) < 13: obj = obj + ' '
		ofile.write(line % (obj, rastr, decstr))

	ofile.close()
	print ('File written to %s' % (outdir+'jsky.list'))
	return

def FinderChart(ra, dec):
	import subprocess

	if ':' in ra:
		ra = ra.strip().split(':')
		ra = float(ra[0])*360.0/24.0 + float(ra[1])/60.0 + float(ra[2])/3600.0
	else:
		ra = float(ra.strip())

	if ':' in dec:
		if dec.startswith('-'): 
			dec = dec[1:]
			sign = -1.0
		else: sign = 1.0

		dec = dec.strip().split(':')
		dec = float(dec[0]) + float(dec[1])/60.0 + float(dec[2])/3600.0
		dec *= sign
	else:
		dec = float(dec.strip())

	baseURL = 'http://astro.subhashbose.com/render_AlL.php?RA=%lf\&DEC=%lf' % (ra,dec)
	subprocess.run('google-chrome --new-window %s' % baseURL, shell=True)


if __name__=='__main__':
	parser = argparse.ArgumentParser(description='Contains observing tools: CSVtoJsky, FinderChart')
	parser.add_argument('function', help='Which function to run', choices=['finderchart','fchart', 'fc','csv2jsky','c2j'], type=str)
	parser.add_argument('--ra', '-r', help='RA for finderchart', type=str)
	parser.add_argument('--dec', '-d', help='DEC for finderchart', type=str)
	parser.add_argument('--fname', '-f', help='Filename for CSVtoJsky', type=str)

	args=parser.parse_args()
	if args.function in ['finderchart', 'fchart', 'fc']:
		assert args.ra != args.dec != None
		FinderChart(args.ra, args.dec)

	elif args.function in ['csv2jsky', 'c2j']:
		assert args.fname != None
		CSVtoJsky(args.fname)

	else:
		raise ValueError