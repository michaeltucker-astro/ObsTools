"""
Michael Tucker 2018
Simple tools to make observing easier

"""

import argparse

def CSVtoJsky(fname, outdir=None):
	import sys,os
	from pandas import read_csv
	"""
	function: CSVtoJsky

	Converts a CSV file to a file parse-able by JSkyCalc
	CSV file must have colnames Target, RA, DEC

	Inputs:
		fname: filename of csv file
		outdir (optional): where to write the output file. Defaults to cwd

	Outputs:
		None
	"""

	def ConvertCoords(ra,dec):
		try:
			ra = float(ra) * 24.0 / 360.0
			hour = int(ra)
			ra = (ra - hour)*60.0
			minutes = int(ra)
			sec = round((ra - minutes) * 60.0, 2)
			rastr = '%02d %02d %05.2f' % (hour, minutes, sec)

			dec = float(dec)
			if dec >= 0.0: sign = '+'
			else: sign = '-'
			deg = int(dec)
			dec = (dec - deg) * 60.0
			dmin = int(dec)
			dsec = round((dec - dmin) * 60.0, 2)
			decstr = '%s%02d %02d %05.2f' % (sign,deg, dmin, dsec)

		except:
			if ':' in ra: ra = ra.split(':')
			else: ra = ra.split()
			rastr = '%02d %02d %05.2f' % (int(ra[0]), int(ra[1]), float(ra[2]))

			if ':' in dec: dec = dec.split(':')
			else: dec = dec.split()
			if int(dec[0]) >= 0.0: sign = '+'
			else: sign = '-'
			decstr = '%s%02d %02d %05.2f' % (sign,abs(int(dec[0])), int(dec[1]), float(dec[2]))
		finally:
			return rastr, decstr


	if not os.path.exists(fname):
		raise IOError('Cant find file %s!' % fname)

	if outdir == None: outdir = os.getcwd()+'/'


	data = read_csv(fname)
	if not all([True if colname in data.columns else False for colname in ['Object', 'RA', 'DEC']]):
		raise KeyError('CSV file must have colnames Object, RA and DEC!')


	ofile = open(outdir+'jsky.list','w')
	ofile.write('#List of targets for jskycalc\n')
	ofile.write('#File generated by CSVtoJsky\n')
	ofile.write('# Target \t RA \t\t DEC \t epoch\n#\n')

	line = '%s %s   %s  2000.0\n'
	for obj, ra, dec in zip(data['Object'], data['RA'], data['DEC']):
		if obj.startswith('#'): continue
		rastr, decstr = ConvertCoords(ra,dec)
		while len(obj) < 13: obj = obj + ' '
		ofile.write(line % (obj, rastr, decstr))

	ofile.close()
	print ('File written to %s' % (outdir+'jsky.list'))
	return

def FinderChart(ra, dec):
	import subprocess

	if ':' in ra:
		ra = ra.strip().split(':')
		ra = float(ra[0])*360.0/24.0 + float(ra[1])/60.0 + float(ra[2])/3600.0
	else:
		ra = float(ra.strip())

	if ':' in dec:
		if dec.startswith('-'): 
			dec = dec[1:]
			sign = -1.0
		else: sign = 1.0

		dec = dec.strip().split(':')
		dec = float(dec[0]) + float(dec[1])/60.0 + float(dec[2])/3600.0
		dec *= sign
	else:
		dec = float(dec.strip())

	baseURL = 'http://astro.subhashbose.com/render_AlL.php?RA=%lf\&DEC=%lf' % (ra,dec)
	subprocess.run('google-chrome --new-window %s' % baseURL, shell=True)

def Scheduler(fname, penalty=2.0):
	data = read_csv(fname)
	if not all([True if colname in data.columns else False for colname in ['Object','RA', 'DEC']]):
		raise KeyError('CSV file must have colnames Object, RA and DEC!')

	names = data['Object'].as_matrix()
	RA = data['RA'].as_matrix()
	DEC = data['DEC'].as_matrix()


	print('IMPLEMENTATION INCOMPLETE! exiting...')


def MakeTNSlist(ofile, declim, maghigh, maglow, Ndays):
	baseURL = "https://wis-tns.weizmann.ac.il/search?&name=&name_like=0&isTNS_AT=yes&public=all&unclassified_at=1&classified_sne=0&ra=&decl=&radius=\
				&coords_unit=arcsec&groupid%5B%5D=null&classifier_groupid%5B%5D=null&type%5B%5D=null&date_start%5Bdate%5D=2018-09-21&date_end%5Bdate%5D=\
				2018-09-28&discovery_mag_min=&discovery_mag_max=20&internal_name=&redshift_min=&redshift_max=&spectra_count=&discoverer=&classifier=&\
				discovery_instrument%5B%5D=&classification_instrument%5B%5D=&hostname=&associated_groups%5B%5D=null&ext_catid=&num_page=1000&\
				display%5Bredshift%5D=1&display%5Bhostname%5D=1&display%5Bhost_redshift%5D=1&display%5Bsource_group_name%5D=1&\
				display%5Bclassifying_source_group_name%5D=1&display%5Bdiscovering_instrument_name%5D=0&display%5Bclassifing_instrument_name%5D=0&\
				display%5Bprograms_name%5D=0&display%5Binternal_name%5D=1&display%5BisTNS_AT%5D=0&display%5Bpublic%5D=1&display%5Bend_pop_period%5D=0&\
				display%5Bspectra_count%5D=1&display%5Bdiscoverymag%5D=1&display%5Bdiscmagfilter%5D=1&display%5Bdiscoverydate%5D=1&display%5Bdiscoverer%5D=1&\
				display%5Bsources%5D=0&display%5Bbibcode%5D=0&display%5Bext_catalogs%5D=0"


if __name__=='__main__':
	parser = argparse.ArgumentParser(description='Contains observing tools: CSVtoJsky, FinderChart')
	parser.add_argument('function', help='Which function to run', choices=['finderchart','fchart', 'fc','csv2jsky','c2j', 'scheduler', 'sched','tnslist', 'tns'], type=str)
	parser.add_argument('-r','--ra', help='RA for finderchart', type=str)
	parser.add_argument('-d','--dec' help='DEC for finderchart', type=str)
	parser.add_argument('-f','--fname', help='CSV file for CSVtoJsky or Scheduler', type=str)
	parser.add_argument('-p','--DECpenalty', help='Penalty factor for declination movements in Scheduler. Default: 2', default=2, type=float)
	parser.add_argument('-dl', '--dec-limit', help='Dec. limit for TNS target list. Default: -30 [deg]', default=-30.0, type=float)
	parser.add_argument('-mu', '--mag-upper', help='Mag upper limit for TNS target list. Default: 20 [mag]', default=20.0, type=float)
	parser.add_argument('-ml', '--mag-lower', help='Mag lower limit for TNS target list. Default: 0 [mag]', default=0.0, type=float)
	parser.add_argument('-o', '--output', help='Output filename for TNS target list. Default: tns-list.csv', default='tns-list.csv', type=str)
	parser.add_argument('-t', '--time', help='# of days to go back in TNS query. default: 7', default=7.0, type=float)
	args=parser.parse_args()

	if args.function in ['finderchart', 'fchart', 'fc']:
		assert args.ra != args.dec != None
		FinderChart(args.ra, args.dec)

	elif args.function in ['csv2jsky', 'c2j']:
		assert args.fname != None
		CSVtoJsky(args.fname)

	elif args.function in ['scheduler', 'sched']:
		Scheduler(args.fname, args.DECpenalty)

	elif args.function in ['tnslist', 'tns']:
		MakeTNSlist(args.output, args.dec_limit, args.mag_upper, args.mag_lower, args.time)

	else:
		raise ValueError('Unknown function argument %s' % args.function)